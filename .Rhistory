by_package
summarize(cran, avg_bytes = mean(size))
summarize(cran, by_package, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum,probs=.99)
quantile(pack_sum$count,probs=.99)
top_counts <- select(pack_sum,count > 679)
top_counts <- select(pack_sum,pack_sum$count > 679)
top_counts <- filter(pack_sum,pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
View(arrange(desc(top_counts)))
View(arrange(top_counts,desc(counts)))
arrange(top_counts,desc(counts))
top_counts_sorted <- arrange(top_counts,desc(counts))
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts)
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(count()))
top_unique_sorted <- arrange(top_unique, desc(count))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
librarty(datasets)
library(datasets)
hist(airquality$Ozone)
plot(Wind, Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)")
?par
View(airquality)
with (airquality, plot(Wind, tempdir()))
with (airquality, plot(Wind, Temp)
)
with (airquality, plot(Wind, Ozone, main = "Test", pch=20))
model <-lm(Ozone ~ Wind, airquality)
model
abline(model,lwd=2)
par(mfrow = c(1,2))
with(airquality, {})
with(airquality, {
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R, OZone, main = "Ozone and Solar Radiation")
})
with(airquality, {
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
with(airquality, {
+ plot(Wind,Ozone,main="Ozone and Wind")
+ plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
+ })
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?Devices
input.dir()
setwd
?setwd
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12)
abline(v=12,lwd=2)
abline(v=12,lwd=4,col="magenta")
skip()
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(y ~ x, data = pollution, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25)
hist(east$pm25,col="green")
hist(subset(pollution, region == "west"),col="green")
hist(subset(pollution$pm25, region == "west"),col="green")
hist(subset(pollution, region == "west")$pm25,col="green")
with(pollution, plot(latitude,pm25))
abline(h=12,lwd=2, lty=2)
plot(pollution$latitude,ppm,col = pollution$region)
abline(h=12,lwd=2, lty=2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,west$pm25,main="East")
plot(east$latitude,east$pm25,main="East")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,pch=8,col="red",main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month,airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality
)
p
names(p)
mynames(myfull)
mynames
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2.1))
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R", local = TRUE))
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
diamonds$color
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut,data=diamonds,pch=20,xlab=myxlab, ylab=myylab, main=mymain)
sample(colors(), 10)
colorRamp(c("red","blue")
)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
View(showMe)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun(rgb)
?fun
?rgb
colorRampPalette(c("blue","green"),alpha=0.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x, y, pch=19, col=(rgb(0, .5, .5)))
plot(x, y, pch=19, col=(rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ, mpg, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom=c(
"point","smooth")
))
qplot(displ, hwy, data = mpg, color = drv, geom=c("point","smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(disp, hwy, data=mpg, facets=.~drv)
qplot(display.brewer.all(), hwy, data=mpg, facets=.~drv)
qplot(display.brewer.all(), hwy, data=mpg, facets=(.~drv)
)
qplot(display.brewer.all(), hwy, data=mpg, facets=expression(.~drv))
qplot(displ, hwy, data=mpg, facets=expression(.~drv))
qplot(display.brewer.all(), hwy, data=mpg, facets=(.~drv))
skip()
qplot(hwy,data=mpg,facets = drv~., binwidth = 2)
qplot(displ, hwy, data=mpg, geom=c("points","smooth"), facets=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets=.~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv) + ggtitle("Swirl")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size = 4, alpha = 1/2)
g + geom_point(aes=(color=drv), size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Milage"))
g + geom_point(aes(color=drv,labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Milage")))
g + geom_point(aes(color=drv,labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Milage")))
skip()
g + geom_point(aes(color=drv)) + geom_smooth(siz = 4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv),size=2,alpha=1/2) + geom_smooth(siz = 4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv),size=2,alpha=1/2) + geom_smooth(size = 4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(family="TImes")
g + geom_point(aes(color=drv)) + theme_bw(base_family="TImes")
skip()
plot(myx,myy,type="l", ylim=c(-3,3))
g <- ggplot(data=testdat, aes(x = myx, y = myy))
g + geom_line()
skip()
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(data=mpg, x = displ, y = hwy, color = as.factor(year))
g <- ggplot(data=mpg, x = displ, y = hwy, color = factor(year))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", se=FALSE,size=2,color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", se=FALSE,size=2,color="black") + labs(x="DIsplacement", y="Highway Mileage", title = "Swirl Rules!")
skip()
library(swirl)
swirl
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col = "red")
5
5
12
abline(h=0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = "cm.colors(25)")
heatmap(dataMatrix, col = cm.colors(25))
heatmat(mt)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red","orange","purple", pcg=3, cex = 2, lwd = 2))
points(cx, cy, col = c("red","orange","purple"), pcg=3, cex = 2, lwd = 2)
points(cx, cy, col = c("red","orange","purple"), pch=3, cex = 2, lwd = 2)
mdist(x,y,cx,xy)
mdist(x,y,cx,cy)
which.min(distTmp,2,which.min)
skip()
points(x, y,  pch=19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
mdist(x,y,newCx,newCy)
apply(disTmp2, 2, which.min)
apply(distTmp2, 2, which.min)
points(x, y,  pch=19, cex = 2, col = cols1[newClust2])
tapply(x, newclust2,mean)
tapply(x, newClust2,mean)
tapply(y, newClust2,mean)
points(FinalCx, FinalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19, cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=x,lwd=3)
skip()
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
myedit("addPatt.R" local=TRUE)
source("addPatt.R" local=TRUE)
skip()
heatmap(dataMatrix)
mat
svd(mat)
matu
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[1:2,]
svd2
svd2$v[,1:2]
svd2$d
skip()
skip()
myImage(a1)
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% svd1$d[1:2]
skip()
myimage(a2)
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
View(ssd)
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dum(sub1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
mypltclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 < svd(scale(sub1[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12], maxCon)
mdist <- dist(c(sub1[,10:12], maxCon))
skip()
hclustering <- hclust(mdist)
myplclust(hlclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names9sub1[maxCom]
names(sub1[maxCom])
names(sub1[maxCon])
kClust <- kmeans(sub1[,1:561], centers=6)
kClust <- kmeans(sub1[, -c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers=6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
1/4
13/52
skip()
1.367e-07
3.50128e-05
skip()
12/52
2/51
.64
.64
mypdf
integrate(mypdf,0,1.6)
1.414
skip()
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
.000997
.014985
.014793
.062383
.00799
0.062383
skip()
3.5
expect_dice()
view(exepct_dice)
skip()
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)/2
integrate(myfunc,0,1)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
appply(allsam,1,mean)
apply(allsam,1,mean)
mean(smeans)
quinf()
qunif()
qunif(.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x*prob)
mean(x*Prob)
mean(x*p)
nosim <- 1000
n <- 10
t <- apply(matrix(rnorm(nosim*n), nosim), 1, mean)
t
dim(t)
sd(t)
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
sd(apply(matrix(runif(nosim*n), nosim), 1, mean))
sd(apply(matrix(rpois(nosim*n,4), nosim), 1, mean))
qnomr(.95, 0, 1)
qnorm(.95, 0, 1)
qnorm(.95, 1, 1)
pnorm(1160,mean = 1020,sd = 50, lower.tail = F)
qnorm(.75,1020,50)
source('C:/Users/Dr. Jeff Dunlap/Google Drive/coursera/Data Science Course/Swirl/Installswirl.R')
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
(sum(dice_sqr * dice_high)) - edh^2
sum(dice_high * dice_sqr) - edh^2
sd(matrix(rnorm(10000),1000),1,mean)
sd(matrix(rnorm(10000),1000),1,mean))
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,T),1000),1,mean))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
swirl()
choose(5,3) * .8^3 * (1-.8)^(5-3)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8,False)
pbinom(2,5,.8,FALSE)
prob(.10)
qnorm(.10)
0
qnorm(.975,3,2)
3 + 1.96*2
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(.75,1020,50,lower.tail = TRUE)
.53
.53
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 +c(-1,1) * qnorm(.975)*sqrt(p*(1-p)/100)
.6 +c(-1,1) * qnorm(.975)*sqrt(.6*(1-.6)/100)
binom.test(60,100)x$conf
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf.int
poisson.test(5,94.32)$conf
setwd("C:/Users/Dr. Jeff Dunlap/Google Drive/coursera/Data Science Course/Course Materials/5-Reproducible Research/Week 4/NOAA-Storm-Damage-Analysis")
